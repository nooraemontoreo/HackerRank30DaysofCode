# DAY 3 
#Given an integer,perform the following conditional actions:
#If is odd, print Weird
#If is even and in the inclusive range of to print Not Weird
#If is even and in the inclusive range of to print Weird
#If is even and greater than print Not Weird Complete the stub code provided in your editor to print whether or not is weird.

import math
import os
import random
import re
import sys

if __name__ == '__main__':
    N = int(input())
   
    if N in range(2,5) and N%2 ==0:
        print("Not Weird")
    elif N in range(6,20) and N%2 ==0:
        print("Weird")
    elif N > 20 and N%2 ==0:
        print("Not Weird")
    else:
        print("Weird")


#DAY 4

#Write a Person class with an instance variable, , and a constructor that takes an integer, , as a parameter. The constructor must assign to after confirming the argument passed as is not negative; if a negative argument is passed as , the constructor should set to
and print Age is not valid, setting age to 0.. In addition, you must write the following instance methods:
    yearPasses() should increase the 
instance variable by
.amIOld() should perform the following conditional actions:
If 
, print You are young..
If
and
, print You are a teenager..
Otherwise, print You are old..



class Person:
    def __init__(self,initialAge):
        # Add some more code to run some checks on initialAge
        self.initialAge = initialAge
    def amIOld(self):
        # Do some computations in here and print out the correct statement to the console
        if self.initialAge<0:
            self.initialAge=0
            print("Age is not valid, setting age to 0.")
        if self.initialAge <13:
            print("You are young.")
        elif self.initialAge >=13 and self.initialAge <18 :
            print ("You are a teenager.")
        else:
            print("You are old.")
            
            
    def yearPasses(self):
        # Increment the age of the person in here
        self.initialAge = self.initialAge+1

t = int(input())
for i in range(0, t):
    age = int(input())         
    p = Person(age)  
    p.amIOld()
    for j in range(0, 3):
        p.yearPasses()       
    p.amIOld()
    print("")


#reverse input array 


#!/bin/python3

import math
import os
import random
import re
import sys



if __name__ == '__main__':
    n = int(input())

    arr = list(map(int, input().rstrip().split()))
    print(" ".join(map(str,arr[::-1])))
    
    
#DAY 8

: Dictionaries and Maps

# Task 
# Given N names and phone numbers, assemble a phone book that maps friends' names to their respective phone numbers. You will then be
# given an unknown number of names to query your phone book for; for each queried, print the associated entry from your phone book (in
# the form name = phoneNumber) or Not found if there is no entry for name.

# Note: Your phone book should be a Dictionary/Map/HashMap data structure.

# Input Format
# The first line contains an integer, N, denoting the number of entries in the phone book. 
# Each of the N subsequent lines describes an entry in the form of 2 space-separated values on a single line. The first value is a
# friend's name, and the second value is an 8-digit phone number.

# After the N lines of phone book entries, there are an unknown number of lines of queries. Each line (query) contains a name to look
# up, and you must continue reading lines until there is no more input.

# Note: Names consist of lowercase English letters and are first names only.

# Constraints
# 1 <= N <= 10^5
# 1 <= queries <= 10^5

# Output Format
# On a new line for each query, print Not found if the name has no corresponding entry in the phone book; otherwise, print the full
# name and phoneNumber in the format name = phoneNumber.

# Enter your code here. Read input from STDIN. Print output to STDOUT

Global frame
n	3
i	3
book	
 
name	"harry"
number	"12299933"
query	"sam"
val	"99912222"

#code

n = int(input())                                                  # n= 3
i = 0
book = dict() #Declare a dictionary
while(i < n):
    name , number = input().split() #Split input for name,number
    book[name] = number #Append key,value pair in dictionary
    i+=1
while True: #Run infinitely 
    try:
        #Trick - If there is no more input stop the program
        query = input()                                           #query = tom
    except:
        break
    val = book.get(query, 0) #Returns 0 is name not in dictionary  # val = "11122222"
    if val != 0:
        print(query + "=" + book[query])                            #prints tom=11122222
    else:
        print("Not found")
	
    




